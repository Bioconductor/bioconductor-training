---
title: "Instructors"
format: html
page-layout: full
editor: visual
execute:
  message: false
  warning: false
  echo: false
---

```{r}
# Load necessary libraries
library(readr)
library(dplyr)
library(tidyr)
library(reactable)
library(tidygeocoder)
library(ggplot2)
library(maps)
library(plotly)
library(countrycode)
```

```{r}
# Check for input file issues
read_instructors <- function(file_path) {
  tryCatch({
    # Read the TSV file
    instructors <- read_delim(file_path, 
                              delim = "\t", 
                              trim_ws = TRUE,
                              na = c("", "NA", "N/A"))
    
    # Check for parsing problems
    parsing_issues <- problems(instructors)
    if (nrow(parsing_issues) > 0) {
      issue_details <- parsing_issues |> 
        mutate(problem_description = paste("Row", row, "has an issue with:", expected, "expected, but", actual, "columns found")) |>
        pull(problem_description)
      stop("Parsing issues detected:\n", paste(issue_details, collapse = "\n"))
    }

    # Check for missing required columns
    required_columns <- c("name", "www", "institution", "city", "country", "status")
    missing_columns <- setdiff(required_columns, names(instructors))
    if (length(missing_columns) > 0) {
      stop("Missing required columns: ", paste(missing_columns, collapse = ", "))
    }

    # Simple data validation for missing key values
    if (any(is.na(instructors$city))) {
      warning("Some entries have missing city information. Please check the data.")
    }
    if (any(is.na(instructors$status))) {
      warning("Some entries have missing status information. Please check the data.")
    }
    
    instructors
  }, error = function(e) {
    stop("Error reading the TSV file: ", e$message)
  })
}
```

```{r}
# Import data from the TSV file and format
instructors <- read_instructors("carpentries_instructors.tsv")

# Add 'Location' by combining city and country for geocoding
instructors <- instructors |> 
  mutate(Location = paste(city, country, sep = ", "))

# Use countrycode to map countries to World Bank regions
instructors <- instructors |> 
  mutate(region = countrycode(country, origin = "country.name", destination = "region"))
```

Map and table showing people in the Bioconductor community who are certified Carpentries instructors or in the process of obtaining certification, such as those in the [Bioconductor Carpentries training program](https://blog.bioconductor.org/#category=Carpentries). If you are a certified Carpentries instructor and don't see your name listed, or if you wish to update your details, please submit a pull request to update the [instructors TSV here](https://github.com/Bioconductor/bioconductor-training/blob/devel/carpentries/carpentries_instructors.tsv).

See [this page](workshops.qmd) for workshops using Bioconductor Carpentries material.

```{r}
# Get coordinates for mapping using OpenStreetMap via tidygeocoder
instructors_geocoded <- instructors |> 
  geocode(Location, method = 'osm', lat = lat, long = lon)
```

```{r}
# Combine geocoded data and set status as factor
all <- instructors_geocoded |> 
  mutate(Status = factor(status, levels = c(
    "Certified", 
    "Certified - CZI Year 1", 
    "Certified - CZI Year 2", 
    "In Progress")
  ))
```

```{r}
# Count total number of instructors (excluding NA in the name column)
total_instructors <- instructors |> filter(!is.na(name)) |> nrow()

# Display the total number of instructors with HTML styling
htmltools::HTML(
  paste0(
    "<div class='instructor-count' style='text-align: center; font-size: 1.2em; font-weight: bold; color: var(--default-body); margin-bottom: 20px; background-color: var(--neutral-n50); padding: 10px; border-radius: 5px;'>",
    "Total number of instructors: ", total_instructors, 
    "</div>"
  )
)

```

```{r}
# Map of instructors
lon_limits <- c(-180, 180)
lat_limits <- c(-60, 90)

world_map <- map_data("world") %>%
  filter(region != "Antarctica")

gg <- ggplot() +
  geom_polygon(
    data = world_map,
    aes(x = long, y = lat, group = group),
    fill = "grey85",
    color = "white"
  ) +
  geom_jitter(
    data = all,
    aes(
      x = lon,
      y = lat,
      text = paste(name, institution, sep = "\n"),
      colour = Status,
      fill = Status,
      shape = Status,
      size = Status
    ),
    width = 0.5,
    height = 0.5
  ) +
  scale_colour_manual(values = c(
    "Certified" = "#0072B2",
    "Certified - CZI Year 1" = "#009E73",
    "Certified - CZI Year 2" = "#CC79A7",
    "In Progress" = "#E69F00"
  )) +
  scale_fill_manual(values = c(
    "Certified" = "#0072B2",
    "Certified - CZI Year 1" = "#009E73",
    "Certified - CZI Year 2" = "#CC79A7",
    "In Progress" = "#E69F00"
  )) +
  scale_shape_manual(values = c(
    "Certified" = 21,
    "Certified - CZI Year 1" = 22,
    "Certified - CZI Year 2" = 24,
    "In Progress" = 21
  )) +
  scale_size_manual(values = c(
    "Certified" = 2,
    "Certified - CZI Year 1" = 2,
    "Certified - CZI Year 2" = 2,
    "In Progress" = 2
  )) +
  coord_fixed(
    ratio = 1.3,
    xlim = lon_limits,
    ylim = lat_limits,
    expand = FALSE
  ) +
  theme_void() +
  theme(
    panel.background = element_rect(fill = "white", color = NA),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(size = 8),
    legend.key.size = unit(0.5, "lines"),
    legend.margin = margin(t = 0, b = 0, unit = 'pt')
  )

# Convert to interactive plotly plot
interactive_map <- ggplotly(gg, tooltip = "text") %>%
  layout(
    margin = list(l = 20, r = 20, t = 20, b = 50),
    hoverlabel = list(align = "left"),
    legend = list(
      orientation = "h",       
      x = 0.5,
      xanchor = "center",
      y = -0.1                
    ),
    xaxis = list(
      showline = FALSE,
      showticklabels = FALSE,
      zeroline = FALSE
    ),
    yaxis = list(
      showline = FALSE,
      showticklabels = FALSE,
      zeroline = FALSE
    )
  ) %>%
  config(
    responsive = TRUE,
    displaylogo = FALSE
  )

# Display the interactive map
interactive_map
```

<br></br> The table below lists all instructors, including their institution, city, country, and region. The region column has been added to make it easier to find instructors in the same geographical area. These regions are based on the World Bank's classification system. The table is fully searchable and filterable, allowing you to quickly locate instructors by various criteria.

```{r}
# Table of instructors
table_data <- all |>   
  select(name, institution, city, country, region, status)

# Create the table
reactable(
  table_data,
  filterable = TRUE,
  searchable = TRUE,
  columns = list(
    name = colDef(
      cell = function(value, index) {
        url <- all$www[index]
        if (!is.na(url) && url != "") {
          htmltools::tags$a(href = url, target = "_blank", as.character(value))
        } else {
          as.character(value)
        }
      }
    ),
    institution = colDef(),
    city = colDef(),
    country = colDef(),
    region = colDef(),
    status = colDef()
  ), 
  defaultSorted = "name",
  defaultPageSize = 100
)
```

::: footer-timestamp
::: {style="text-align: center; font-size: 0.9em; color: var(--neutral-n200); margin-top: 20px; padding-top: 10px;"}
```         
Last rendered on: `r format(Sys.Date(), "%Y-%m-%d")`
```
:::
:::
