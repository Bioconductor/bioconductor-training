---
title: "Workshops"
format: html
page-layout: full
editor: visual
execute:
  message: false
  warning: false
  echo: false
---

```{r}
# Load necessary libraries
library(readr)
library(dplyr)
library(tidyr)
library(reactable)
library(ggplot2)
library(maps)
library(htmltools)
library(tidygeocoder)
library(plotly)
library(countrycode)
```

Workshops using the [Bioconductor Carpentry training material](https://www.bioconductor.org/help/education-training/) are listed below. If you have taught a workshop using the Bioconductor Carpentry material, please submit a pull request to update the [workshops TSV here](https://github.com/Bioconductor/bioconductor-training/blob/devel/carpentry/carpentry_workshops.tsv).

See [this page](instructors.qmd) for Carpentry instructors in the Bioconductor community.

```{r}
# Check for input file issues
read_workshops <- function(file_path) {
  tryCatch({
    # Read the TSV file
    workshops <- read_delim(file_path, 
                            delim = "\t", 
                            trim_ws = TRUE,
                            na = c("", "NA", "N/A"))
    
    # Check for parsing problems
    parsing_issues <- problems(workshops)
    if (nrow(parsing_issues) > 0) {
      issue_details <- parsing_issues |> 
        mutate(problem_description = paste("Row", row, "has an issue with:", expected, "expected, but", actual, "columns found")) |>
        pull(problem_description)
      stop("Parsing issues detected:\n", paste(issue_details, collapse = "\n"))
    }

    # Check for missing required columns
    required_columns <- c("date", "hosted_by", "host_url", "workshop", "workshop_url", "city", "country", "instructors")
    missing_columns <- setdiff(required_columns, names(workshops))
    if (length(missing_columns) > 0) {
      stop("Missing required columns: ", paste(missing_columns, collapse = ", "))
    }

    # Simple data validation for key values
    if (any(is.na(workshops$city))) {
      warning("Some entries have missing city information. Please check the data.")
    }
    if (any(is.na(workshops$instructors))) {
      warning("Some entries have missing instructor information. Please check the data.")
    }
    
    workshops
  }, error = function(e) {
    stop("Error reading the TSV file: ", e$message)
  })
}
```

```{r}
# Add 'region' using countrycode for World Bank regions
workshops <- read_workshops("carpentries_workshops.tsv") %>%
  mutate(Location = paste(city, country, sep = ", ")) %>%
  mutate(region = countrycode(country, origin = "country.name", destination = "region"))

# Filter out workshops that are "Online" for mapping purposes only
workshops_for_map <- workshops %>%
  filter(city != "Online")

# Geocode all locations using OpenStreetMap via tidygeocoder
workshops_geocoded <- workshops_for_map %>%
  geocode(Location, method = 'osm', lat = lat, long = lon)

```

```{r}
# Count total number of workshops (excluding NA in the date column)
total_workshops <- workshops |> filter(!is.na(date)) |> nrow()

# Display the total number of workshops with HTML styling
htmltools::HTML(
  paste0(
    "<div class='workshop-count' style='text-align: center; font-size: 1.2em; font-weight: bold; color: var(--default-body); margin-bottom: 20px; background-color: var(--neutral-n50); padding: 10px; border-radius: 5px;'>",
    "Total number of workshops: ", total_workshops, 
    "</div>"
  )
)

```

```{r}
# Define explicit coordinate limits for a consistent world view
lon_limits <- c(-180, 180)
lat_limits <- c(-60, 90)

# Prepare the world map data
world_map <- map_data("world") %>%
  filter(region != "Antarctica")

# Create the ggplot object for the map
gg <- ggplot() +
  geom_polygon(
    data = world_map,
    aes(x = long, y = lat, group = group),
    fill = "grey85",
    color = "white"
  ) +
  geom_jitter(
    data = workshops_geocoded,
    aes(
      x = lon,
      y = lat,
      text = paste0(
        "<b>Date:</b> ", date, "<br>",
        "<b>Hosted By:</b> ", hosted_by, "<br>",
        "<b>Location:</b> ", Location, "<br>",
        "<b>Workshop:</b> ", workshop, "<br>",
        "<b>Instructors:</b> ", instructors
      ),
      colour = workshop,
      fill = workshop,
      shape = workshop,
      size = workshop
    ),
    width = 0.5,
    height = 0.5
  ) +
  scale_colour_brewer(palette = "Set2") +
  scale_fill_brewer(palette = "Set2") +
  scale_shape_manual(values = 21:25) +  # Adjust number of shapes as needed
  scale_size_manual(values = rep(2, length(unique(workshops_geocoded$workshop)))) +
  coord_fixed(
    ratio = 1.3,
    xlim = lon_limits,
    ylim = lat_limits,
    expand = FALSE
  ) +
  theme_void() +
  theme(
    panel.background = element_rect(fill = "white", color = NA),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(size = 8),
    legend.key.size = unit(0.5, "lines"),
    legend.margin = margin(t = 0, b = 0, unit = 'pt')
  )

# Convert ggplot to interactive plotly plot
interactive_map <- ggplotly(gg, tooltip = "text") %>%
  layout(
    margin = list(l = 20, r = 20, t = 20, b = 50),
    hoverlabel = list(align = "left"),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    xaxis = list(
      showline = FALSE,
      showticklabels = FALSE,
      zeroline = FALSE
    ),
    yaxis = list(
      showline = FALSE,
      showticklabels = FALSE,
      zeroline = FALSE
    )
  ) %>%
  config(
    responsive = TRUE,
    displaylogo = FALSE
  )

# Display the interactive map
interactive_map
```

The table below lists all workshops, including the date, host institution, city, country, and region. The region column has been added to make it easier to find workshops in the same geographical area. These regions are based on the World Bank's classification system. The table is fully searchable and filterable, allowing you to quickly locate workshops by various criteria, such as location or instructors.

```{r}
# Create the reactable table
workshops %>%
  select(date, hosted_by, workshop, city, country, region, instructors) %>%
  reactable(
    filterable = TRUE,
    searchable = TRUE,
    compact = TRUE,
    columns = list(
      date = colDef(name = "Date"),
      hosted_by = colDef(
        name = "Hosted By",
        cell = function(value, index) {
          # Check if the 'host_url' column exists and is not NA
          if ("host_url" %in% names(workshops) && !is.na(workshops$host_url[index])) {
            htmltools::tags$a(href = workshops$host_url[index], target = "_blank", as.character(value))
          } else {
            as.character(value)
          }
        }
      ),
      workshop = colDef(
        name = "Workshop",
        cell = function(value, index) {
          # Check if the 'workshop_url' column exists and is not NA
          if ("workshop_url" %in% names(workshops) && !is.na(workshops$workshop_url[index])) {
            htmltools::tags$a(href = workshops$workshop_url[index], target = "_blank", as.character(value))
          } else {
            as.character(value)
          }
        }
      ),
      city = colDef(name = "City"),
      country = colDef(name = "Country"),
      region = colDef(name = "Region"),
      instructors = colDef(name = "Instructors")
    ),
    defaultPageSize = 100,
    striped = TRUE,
    bordered = TRUE,
    style = list(
      border = "1px solid #ccc",
      stripedColor = "#f0f0f0",
      fontSize = "0.875rem"
    )
  )
```

:::: footer-timestamp
::: {style="text-align: center; font-size: 0.9em; color: var(--neutral-n200); margin-top: 20px; padding-top: 10px;"}
```         
Last rendered on: `r format(Sys.Date(), "%Y-%m-%d")`
```
:::
::::
